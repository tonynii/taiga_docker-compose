version: '3'

services:
  adminer:
    image: adminer
    restart: always
    networks:
      - taiga
    ports:
      - 1000:8080
  db:
    image: postgres:alpine
    restart: always
    networks:
      - taiga
    environment:
      POSTGRES_USER: platform
      POSTGRES_PASSWORD: platform!2020
    volumes:
      - taiga_db:/var/lib/postgresql/data/
  redis:
    image: "redis:alpine"
    restart: always
    networks:
      - taiga
  rabbit:
    image: "rabbitmq:3-management-alpine"
    restart: always
    networks:
      - taiga
    environment:
      RABBITMQ_DEFAULT_USER: platform 
      RABBITMQ_DEFAULT_PASS: platform!2020
  api:
    build: .
    networks:
      - taiga
    restart: always
    environment:
        DJANGO_ENV: prod
        POSTGRES_DB: platform
        POSTGRES_HOST: db
        POSTGRES_USER: platform
        POSTGRES_PASSWORD: platform!2020
        UPLOAD_ROOT: /home/
    command: gunicorn --workers 4 --timeout 60 -b 0.0.0.0:8001 taiga.wsgi
    ports:
      - 8001:8001
    depends_on:
      - db
  celery:
    build: .
    networks:
      - taiga
    restart: always
    environment:
        DJANGO_ENV: prod
        POSTGRES_DB: platform
        POSTGRES_HOST: db
        POSTGRES_USER: platform
        POSTGRES_PASSWORD: platform!2020
        UPLOAD_ROOT: /home/
    command: celery -A taiga worker --concurrency 4 -l INFO
    depends_on:
      - db
      - redis
      - rabbit
  nginx:
    build:
      context: .
      dockerfile: Dockerfile_fd
    networks:
      - taiga
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
  event:
    build:
      context: .
      dockerfile: Dockerfile_et
    networks:
      - taiga
    command: node_modules/coffeescript/bin/coffee index.coffee
    restart: always
    depends_on:
      - redis
      - rabbit
    ports:
      - "8888:8888"
  
volumes:
  taiga_db:

networks:
  taiga:
    driver: bridge